{"version":3,"sources":["MyComponents/Header.js","MyComponents/TextForm.jsx","MyComponents/Alerts.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","searchBar","placeholder","onChange","toogleDarkMode","htmlfor","defaultProps","TextForm","useState","text","setText","heading","name","value","rows","event","target","onClick","newText","toUpperCase","showAlert","toLowerCase","joinString","split","reverse","join","newtext","replace","SelectAll","navigator","clipboard","writeText","length","Alerts","alert","class","role","word","lower","charAt","slice","capatilize","msg","data-bs-dismiss","App","setDarkMode","setAlert","message","setTimeout","document","body","style","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.92bf7586.chunk.js","sourcesContent":["// eslint-disable-next-line\r\nimport React from 'react'\r\n// import {Link} from 'react-router-dom'\r\n\r\n\r\nexport default function Header(props) {\r\n\r\n\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\"  href = \"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href =\"#\">Home</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href = \"#\" >About</a>\r\n            </li>\r\n\r\n\r\n          </ul>\r\n          {props.searchBar ? <form className=\"d-flex\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n          </form> : \"\"}\r\n          <div className ={`form-check form-switch mx-2 text-${props.mode ==='light'?'dark':'light'}}`}>\r\n            <input className =\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onChange ={props.toogleDarkMode}/>\r\n            <label className =\"form-check-label\" htmlfor=\"flexSwitchCheckDefault\">{props.mode}</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\n// Header.PropTypes={\r\n//     title: ProtoTypes.String\r\n\r\n// }\r\nHeader.defaultProps = {\r\n  title: \"Your Title Here\"\r\n}\r\n","// eslint-disable-next-line\r\nimport React, { useState } from \"react\";\r\n\r\nfunction TextForm(props) {\r\n  const handleupCick = () => {\r\n    // console.log(\"Upper case was clicked \" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"converted to upper case\",\"success\")\r\n\r\n  };\r\n\r\n  const handleONChange = (event) => {\r\n    // console.log(\"On Change\");\r\n    setText(event.target.value);\r\n  };\r\n  const handlelowerCaseCick = () => {\r\n      let newText = text.toLowerCase();\r\n      setText(newText);\r\n      props.showAlert(\"converted to lower case\",\"success\")\r\n  }\r\n\r\n  const handleclearText = () =>{\r\n    setText(\"\")\r\n    props.showAlert(\"text cleared\",\"success\")\r\n  }\r\n\r\n  const handleReveseString = () =>{\r\n    let splitString = text.split(\"\")\r\n    let reveseString = splitString.reverse();\r\n    let joinString = reveseString.join(\"\");\r\n    setText(joinString);\r\n  }\r\n\r\n  const handleSpace = () =>{\r\n    const newtext = text.replace(/\\s+/g,' ');\r\n    setText(newtext);\r\n    props.showAlert(\"Extra space removed\",\"success\")\r\n\r\n  }\r\n\r\n  const handleCopy = () =>{\r\n    text.SelectAll()\r\n    navigator.clipboard.writeText(text)\r\n\r\n  }\r\n\r\n  const [text, setText] = useState(\"\");\r\n  return (\r\n    <>\r\n  \r\n      <div className={`container text-${props.mode ==='light'?'dark':'light'}}`}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            name=\"\"\r\n            className=\"form-control\"\r\n            value={text}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n            onChange={handleONChange}\r\n            placeholder=\"Enter the Text Here\"\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary\" onClick={handleupCick}>\r\n          Convert to uppercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handlelowerCaseCick}>Convert to lowercase</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleclearText}>Clear</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleReveseString}>Reverse</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleSpace}>Remove Extra spaces</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy</button>\r\n      </div>\r\n\r\n      <div className={`container my-3 text-${props.mode ==='light'?'dark':'white'}}`}>\r\n        <h1>Your Text Summary</h1>\r\n        <p>\r\n          {text.split(\" \").length} words and {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} Read time</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length > 0 ? text : \"Enter the text to preview...\"}</p>\r\n      </div>\r\n      \r\n    </>\r\n  );\r\n}\r\n\r\nexport default TextForm;\r\n","import React from \"react\";\r\n\r\nfunction Alerts(props) {\r\n  const capatilize= (word) =>{\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n\r\n\r\n  return (\r\n    props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n     <strong>{capatilize(props.alert.type)}</strong> :{props.alert.msg}\r\n      <button\r\n        type=\"button\"\r\n        class=\"btn-close\"\r\n        data-bs-dismiss=\"alert\"\r\n        aria-label=\"Close\"\r\n      ></button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alerts;\r\n","// eslint-disable-next-line\nimport \"./App.css\";\n// import About from \"./MyComponents/About\";\nimport Header from \"./MyComponents/Header\";\nimport TextForm from \"./MyComponents/TextForm\";\nimport React, { useState } from \"react\";\nimport Alerts from \"./MyComponents/Alerts\";\n// import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setDarkMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toogleDarkMode = () => {\n    if (mode === \"light\") {\n      setDarkMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode enabled \", \"success\");\n    } else if (mode === \"dark\") {\n      setDarkMode(\"light\");\n      document.body.style.backgroundColor = \"#fff\";\n      showAlert(\"Light mode enabled \", \"success\");\n    }\n  };\n\n  return (\n    <>\n      {/* <Router> */}\n      <Header\n        title=\"PK Limited\"\n        searchBar={true}\n        mode={mode}\n        toogleDarkMode={toogleDarkMode}\n      />\n      <Alerts alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Switch> */}\n        {/* <Route exact path=\"/about\"> */}\n        {/* <About /> */}\n        {/* </Route> */}\n        {/* <Route exact path=\"/\"> */}\n        <TextForm\n          heading=\"Enter the Text here to analyze\"\n          showAlert={showAlert}\n          mode={mode}\n        />\n        {/* </Route> */}\n        {/* </Switch> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}